{
  "quiz": {
    "id": 18769,
    "title": "Active Model Serializer Quiz",
    "html_url": "https://learning.flatironschool.com/courses/4182/quizzes/18769",
    "mobile_url": "https://learning.flatironschool.com/courses/4182/quizzes/18769?force_user=1&persist_headless=1",
    "description": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-4-quiz-active-model-serializer\"></div>\n<header class=\"fis-header\">\n  <a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-4-quiz-active-model-serializer/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a>\n</header>\n\n<p>It's time to check your knowledge! Use this quiz to create a custom study guide.\nNote any answers that were marked incorrect, so you can study the relevant\nmaterial and try this quiz again.</p>\n\n<p>If you don't know the answer to a question, please do not guess. Instead, select\n\"I don't know\". It's OK not to know everything and to admit when we're unsure.</p>",
    "quiz_type": "assignment",
    "time_limit": null,
    "timer_autosubmit_disabled": false,
    "shuffle_answers": true,
    "show_correct_answers": false,
    "scoring_policy": "keep_highest",
    "allowed_attempts": 3,
    "one_question_at_a_time": true,
    "question_count": 8,
    "points_possible": 8.0,
    "cant_go_back": false,
    "access_code": null,
    "ip_filter": null,
    "due_at": null,
    "lock_at": null,
    "unlock_at": null,
    "published": false,
    "unpublishable": true,
    "locked_for_user": true,
    "lock_info": {
      "missing_permission": "participate_as_student",
      "asset_string": "quizzes:quiz_18769"
    },
    "lock_explanation": "This quiz is currently locked.",
    "hide_results": "until_after_last_attempt",
    "show_correct_answers_at": null,
    "hide_correct_answers_at": null,
    "all_dates": [
      {
        "due_at": null,
        "unlock_at": null,
        "lock_at": null,
        "base": true
      }
    ],
    "can_unpublish": true,
    "can_update": true,
    "require_lockdown_browser": false,
    "require_lockdown_browser_for_results": false,
    "require_lockdown_browser_monitor": false,
    "lockdown_browser_monitor_data": null,
    "speed_grader_url": null,
    "permissions": {
      "manage": true,
      "read": true,
      "create": true,
      "update": true,
      "submit": true,
      "preview": true,
      "delete": true,
      "read_statistics": true,
      "grade": true,
      "review_grades": true,
      "view_answer_audits": true
    },
    "quiz_reports_url": "https://learning.flatironschool.com/api/v1/courses/4182/quizzes/18769/reports",
    "quiz_statistics_url": "https://learning.flatironschool.com/api/v1/courses/4182/quizzes/18769/statistics",
    "message_students_url": "https://learning.flatironschool.com/api/v1/courses/4182/quizzes/18769/submission_users/message",
    "section_count": 1,
    "important_dates": false,
    "quiz_submission_versions_html_url": "https://learning.flatironschool.com/courses/4182/quizzes/18769/submission_versions",
    "assignment_id": 126719,
    "one_time_results": false,
    "only_visible_to_overrides": false,
    "assignment_group_id": 8385,
    "show_correct_answers_last_attempt": false,
    "version_number": 2,
    "has_access_code": false,
    "post_to_sis": false,
    "migration_id": null,
    "question_types": [

    ]
  },
  "questions": [
    {
      "quiz_id": 18769,
      "id": 123863,
      "quiz_group_id": null,
      "assessment_question_id": 134151,
      "position": null,
      "question_name": "Active Model Serializer",
      "question_type": "multiple_answers_question",
      "question_text": "<p>Which of the following are true of the <code>ActiveModel::Serializer</code> gem? Select all\nthat apply.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/4182/assignments/120718\">Active Model Serializer</a></li></ul><p></p>",
      "answers": [
        {
          "id": 2478,
          "text": "",
          "comments": "",
          "comments_html": "<p>Correct! With the <code>ActiveModel::Serializer</code> gem installed, we can easily\nserialize our Active Record objects by creating a new class that inherits from\n<code>ActiveModel::Serializer</code> and follows the appropriate naming conventions.</p>",
          "weight": 100.0,
          "html": "<p>It follows <strong>convention over configuration</strong></p>"
        },
        {
          "id": 5153,
          "text": "",
          "comments": "",
          "comments_html": "<p>Right! In a Rails application, separation of concerns is important since Rails\nfollows the Model-View-Controller pattern. <code>ActiveModel::Serializer</code> helps\nwhen creating classes that are responsible for converting an Active Record\nobject into a JSON string, acting like the view layer in our application.</p>",
          "weight": 100.0,
          "html": "<p>It helps with <strong>separation of concerns</strong></p>"
        },
        {
          "id": 8098,
          "text": "",
          "comments": "",
          "comments_html": "<p>Rails has some of its own serialization methods built in, but\n<code>ActiveModel::Serializer</code> is a separate gem that we need to add to our\nprojects.</p>",
          "weight": 0.0,
          "html": "<p>It comes <strong>built in</strong> with Rails</p>"
        },
        {
          "id": 6119,
          "text": "",
          "comments": "",
          "comments_html": "",
          "weight": 0.0,
          "html": "<p>I don't know.</p>"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 18769,
      "id": 123864,
      "quiz_group_id": null,
      "assessment_question_id": 134152,
      "position": null,
      "question_name": "Active Model Serializer",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Your app includes a User model with <code>first_name</code>, <code>last_name</code>, and <code>title</code>\n(\"Ms.\", \"Mx.\", etc.) attributes. You want to be able to include an honorific in\nthe JSON response for your User model (for example, \"Dr. Valdez\"). What code\ncould you write in the <code>UserSerializer</code> class to accomplish this?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/4182/assignments/120718\">Active Model Serializer</a></li></ul><p></p>",
      "answers": [
        {
          "id": 6185,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># user_serializer.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserSerializer</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveModel</span><span class=\"o\">::</span><span class=\"no\">Serializer</span>\n  <span class=\"k\">def</span> <span class=\"nf\">honorific</span>\n    <span class=\"s2\">\"</span><span class=\"si\">#{</span><span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">object</span><span class=\"p\">.</span><span class=\"nf\">title</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">#{</span><span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">object</span><span class=\"p\">.</span><span class=\"nf\">last_name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Right! In instance methods defined in the the <code>UserSerializer</code> class, <code>self</code>\nrefers to the <code>UserSerializer</code> instance, and <code>self.object</code> refers to the\nobject being serialized (the <code>User</code> instance).</p>",
          "weight": 100.0
        },
        {
          "id": 7456,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># user_serializer.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserSerializer</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveModel</span><span class=\"o\">::</span><span class=\"no\">Serializer</span>\n  <span class=\"k\">def</span> <span class=\"nf\">honorific</span>\n    <span class=\"s2\">\"</span><span class=\"si\">#{</span><span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">title</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">#{</span><span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">last_name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Not quite. In instance methods defined in the the <code>UserSerializer</code> class,\n<code>self</code> refers to the <code>UserSerializer</code> instance, not the <code>User</code> instance, so we\ncan't access the user's the <code>title</code> and <code>last_name</code> attributes directly.</p>",
          "weight": 0.0
        },
        {
          "id": 5992,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># user_serializer.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserSerializer</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveModel</span><span class=\"o\">::</span><span class=\"no\">Serializer</span>\n  <span class=\"k\">def</span> <span class=\"nf\">honorific</span>\n    <span class=\"s2\">\"</span><span class=\"si\">#{</span><span class=\"n\">title</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">#{</span><span class=\"n\">last_name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Not quite. The <code>title</code> and <code>last_name</code> methods are defined in the <code>User</code>\nclass, not the <code>UserSerializer</code> class, so we can't use them directly.</p>",
          "weight": 0.0
        },
        {
          "id": 6987,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 18769,
      "id": 123866,
      "quiz_group_id": null,
      "assessment_question_id": 134154,
      "position": null,
      "question_name": "Active Model Serializer",
      "question_type": "multiple_answers_question",
      "question_text": "<p>Consider an app with <code>Chef</code>, <code>Recipe</code> and <code>Review</code> resources, where chefs have many\nrecipes and recipes have many reviews.</p>\n\n<p>When a user makes a <code>GET</code> request to <code>/chefs/:id</code>, you want to send a JSON\nresponse that includes a list of the chef's recipes and a list of each recipe's\nreviews as follows:</p>\n<div class=\"highlight\"><pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Mary Berry\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"recipes\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Classic Lemon Tart\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"reviews\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n        </span><span class=\"p\">{</span><span class=\"w\">\n          </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n          </span><span class=\"nl\">\"score\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\">\n          </span><span class=\"nl\">\"comment\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Worthy of a handshake!\"</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n      </span><span class=\"p\">]</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n<p>Select the serializer(s) that you would need to write to produce the desired\nJSON response. Select all that apply:</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/4182/assignments/120722\">Serializing Associations</a></li></ul><p></p>",
      "answers": [
        {
          "id": 6589,
          "text": "",
          "comments": "",
          "comments_html": "<p>Spot on! Since we want the <strong>chef</strong> to include a nested array of <strong>recipes</strong>,\nwe need to include <code>has_many :recipes</code> in the <code>ChefSerializer</code>.</p>",
          "weight": 100.0,
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">ChefSerializer</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveModel</span><span class=\"o\">::</span><span class=\"no\">Serializer</span>\n  <span class=\"n\">attributes</span> <span class=\"ss\">:id</span><span class=\"p\">,</span> <span class=\"ss\">:name</span>\n  <span class=\"n\">has_many</span> <span class=\"ss\">:recipes</span>\n<span class=\"k\">end</span>\n</code></pre></div>"
        },
        {
          "id": 9176,
          "text": "",
          "comments": "",
          "comments_html": "<p>Right! Since we want each <strong>recipe</strong> to include a nested array of <strong>reviews</strong>,\nwe need to include <code>has_many :reviews</code> in the <code>RecipeSerializer</code>.</p>",
          "weight": 100.0,
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">RecipeSerializer</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveModel</span><span class=\"o\">::</span><span class=\"no\">Serializer</span>\n  <span class=\"n\">attributes</span> <span class=\"ss\">:id</span><span class=\"p\">,</span> <span class=\"ss\">:name</span>\n  <span class=\"n\">has_many</span> <span class=\"ss\">:reviews</span>\n<span class=\"k\">end</span>\n</code></pre></div>"
        },
        {
          "id": 2716,
          "text": "",
          "comments": "",
          "comments_html": "<p>Since we want the reviews nested under each recipe in our JSON, we only need\nto include <code>has_many :reviews</code> in the <code>RecipeSerializer</code>, not in the\n<code>ChefSerializer</code>.</p>",
          "weight": 0.0,
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">ChefSerializer</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveModel</span><span class=\"o\">::</span><span class=\"no\">Serializer</span>\n  <span class=\"n\">attributes</span> <span class=\"ss\">:id</span><span class=\"p\">,</span> <span class=\"ss\">:name</span>\n  <span class=\"n\">has_many</span> <span class=\"ss\">:recipes</span>\n  <span class=\"n\">has_many</span> <span class=\"ss\">:reviews</span><span class=\"p\">,</span> <span class=\"ss\">through: :recipes</span>\n<span class=\"k\">end</span>\n</code></pre></div>"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 18769,
      "id": 123870,
      "quiz_group_id": null,
      "assessment_question_id": 134169,
      "position": null,
      "question_name": "Active Model Serializer",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Consider an app with <code>Author</code> and <code>Book</code> resources, where <code>Author</code>s have many <code>Book</code>s\nand <code>Book</code>s belong to an <code>Author</code>.</p>\n\n<p>When a user makes a <code>GET</code> request to <code>/authors/:id</code>, you want to use a custom\nserializer, the <code>CustomBookSerializer</code>, instead of the default <code>BookSerializer</code>,\nfor generating the JSON for each book associated with the author:</p>\n<div class=\"highlight\"><pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Mary Berry\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"books\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"title\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Recipe for Life\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n<p>Which of the following code snippets uses the <code>CustomBookSerializer</code> correctly?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/4182/assignments/120722\">Serializing Associations</a></li></ul><p></p>",
      "answers": [
        {
          "id": 6080,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># app/serializers/custom_book_serializer.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">CustomBookSerializer</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveModel</span><span class=\"o\">::</span><span class=\"no\">Serializer</span>\n  <span class=\"n\">attributes</span> <span class=\"ss\">:title</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># app/serializers/author_serializer.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">AuthorSerializer</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveModel</span><span class=\"o\">::</span><span class=\"no\">Serializer</span>\n  <span class=\"n\">attributes</span> <span class=\"ss\">:id</span><span class=\"p\">,</span> <span class=\"ss\">:name</span>\n\n  <span class=\"n\">has_many</span> <span class=\"ss\">:books</span><span class=\"p\">,</span> <span class=\"ss\">serializer: </span><span class=\"no\">CustomBookSerializer</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># app/controllers/authors_controller.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">AuthorsController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n  <span class=\"k\">def</span> <span class=\"nf\">show</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"no\">Author</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:id</span><span class=\"p\">])</span>\n    <span class=\"n\">render</span> <span class=\"ss\">json: </span><span class=\"n\">author</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Right! The <code>has_many</code> macro typically uses naming conventions to serialize an\nassociated resource, but we can <strong>explicitly</strong> tell it to use a different\nserializer with the <code>serializer</code> option.</p>",
          "weight": 100.0
        },
        {
          "id": 4611,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># app/serializers/custom_book_serializer.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">CustomBookSerializer</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveModel</span><span class=\"o\">::</span><span class=\"no\">Serializer</span>\n  <span class=\"n\">attributes</span> <span class=\"ss\">:title</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># app/serializers/author_serializer.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">AuthorSerializer</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveModel</span><span class=\"o\">::</span><span class=\"no\">Serializer</span>\n  <span class=\"n\">attributes</span> <span class=\"ss\">:id</span><span class=\"p\">,</span> <span class=\"ss\">:name</span>\n\n  <span class=\"n\">has_many</span> <span class=\"ss\">:books</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># app/controllers/authors_controller.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">AuthorsController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n  <span class=\"k\">def</span> <span class=\"nf\">show</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"no\">Author</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:id</span><span class=\"p\">])</span>\n    <span class=\"n\">render</span> <span class=\"ss\">json: </span><span class=\"n\">author</span><span class=\"p\">,</span> <span class=\"ss\">serializer: </span><span class=\"no\">CustomBookSerializer</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Not quite. When using the <code>serializer</code> option along with the <code>render</code> method,\nwe'd be using the <code>CustomBookSerializer</code> to serialize the <code>author</code> object\ninstead of the books associated with the author.</p>",
          "weight": 0.0
        },
        {
          "id": 1964,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># app/serializers/custom_book_serializer.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">CustomBookSerializer</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveModel</span><span class=\"o\">::</span><span class=\"no\">Serializer</span>\n  <span class=\"n\">attributes</span> <span class=\"ss\">:title</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># app/serializers/author_serializer.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">AuthorSerializer</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveModel</span><span class=\"o\">::</span><span class=\"no\">Serializer</span>\n  <span class=\"n\">attributes</span> <span class=\"ss\">:id</span><span class=\"p\">,</span> <span class=\"ss\">:name</span>\n\n  <span class=\"n\">has_many</span> <span class=\"ss\">:books</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># app/controllers/authors_controller.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">AuthorsController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n  <span class=\"k\">def</span> <span class=\"nf\">show</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"no\">Author</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:id</span><span class=\"p\">])</span>\n    <span class=\"n\">render</span> <span class=\"ss\">json: </span><span class=\"n\">author</span><span class=\"p\">,</span> <span class=\"ss\">include: </span><span class=\"p\">[</span><span class=\"s1\">'custom_books'</span><span class=\"p\">]</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>The <code>include</code> option is only necessary if you want to render data that’s nested\nmore than one level deep —&nbsp;it doesn't help here with our custom serializer.</p>",
          "weight": 0.0
        },
        {
          "id": 6956,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    }
  ]
}